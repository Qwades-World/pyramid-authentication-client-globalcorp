/**
 * Pyramid Analytics Web API
 * Pyramid Analytics Web API enables user applications to manage their pyramid                                             data and settings
 *
 * The version of the OpenAPI document: 2023.12.181
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { HierarchyCategory } from './hierarchyCategory';
import { HierarchyType } from './hierarchyType';
import { ModelingHierarchyLevel } from './modelingHierarchyLevel';
import { ParentChildOrphanHandlingType } from './parentChildOrphanHandlingType';
import { ParentChildRollupType } from './parentChildRollupType';

/**
* Hierarchy definition in the model. A hierarchy is defined by a list of levels, each defined by a column
*/
export class ModelingHierarchy {
    'hierarchyType'?: HierarchyType;
    /**
    * Parent-Child hierarchy\'s unary-operator column
    */
    'unaryOperatorSourceColumnUniqueName'?: string;
    /**
    * Parent-Child hierarchy\'s order column
    */
    'orderSourceColumnUniqueName'?: string;
    /**
    * Parent-Child hierarchy\'s caption column
    */
    'captionSourceColumnUniqueName'?: string;
    /**
    * The hierarchy\'s System ID
    */
    'hierarchyId'?: string;
    /**
    * The hierarchy\'s Display Name
    */
    'displayName'?: string;
    /**
    * The hierarchy\'s description
    */
    'description'?: string;
    /**
    * Is it possible to aggregate by this hierarchy
    */
    'isAggregatable'?: boolean;
    /**
    * Parent-Child hierarchy\'s key column
    */
    'keySourceColumnUniqueName'?: string;
    /**
    * The hierarchy\'s Unique identifier
    */
    'uniqueName'?: string;
    /**
    * Parent-Child hierarchy\'s parent column
    */
    'parentKeySourceColumnUniqueName'?: string;
    'hierarchyCategory'?: HierarchyCategory;
    /**
    * Does this hierarchy have a default member
    */
    'hasDefaultMember'?: boolean;
    'parentChildRollupType'?: ParentChildRollupType;
    /**
    * The hierarchy levels
    */
    'levels'?: Array<ModelingHierarchyLevel>;
    /**
    * The hierarchy\'s display folder name
    */
    'displayFolder'?: string;
    'parentChildOrphanHandlingType'?: ParentChildOrphanHandlingType;
    /**
    * Value used to determine the type of the item receiving, use the class name
    */
    'inheritanceType'?: string = 'ModelingHierarchy';

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "hierarchyType",
            "baseName": "hierarchyType",
            "type": "HierarchyType"
        },
        {
            "name": "unaryOperatorSourceColumnUniqueName",
            "baseName": "unaryOperatorSourceColumnUniqueName",
            "type": "string"
        },
        {
            "name": "orderSourceColumnUniqueName",
            "baseName": "orderSourceColumnUniqueName",
            "type": "string"
        },
        {
            "name": "captionSourceColumnUniqueName",
            "baseName": "captionSourceColumnUniqueName",
            "type": "string"
        },
        {
            "name": "hierarchyId",
            "baseName": "hierarchyId",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "isAggregatable",
            "baseName": "isAggregatable",
            "type": "boolean"
        },
        {
            "name": "keySourceColumnUniqueName",
            "baseName": "keySourceColumnUniqueName",
            "type": "string"
        },
        {
            "name": "uniqueName",
            "baseName": "uniqueName",
            "type": "string"
        },
        {
            "name": "parentKeySourceColumnUniqueName",
            "baseName": "parentKeySourceColumnUniqueName",
            "type": "string"
        },
        {
            "name": "hierarchyCategory",
            "baseName": "hierarchyCategory",
            "type": "HierarchyCategory"
        },
        {
            "name": "hasDefaultMember",
            "baseName": "hasDefaultMember",
            "type": "boolean"
        },
        {
            "name": "parentChildRollupType",
            "baseName": "parentChildRollupType",
            "type": "ParentChildRollupType"
        },
        {
            "name": "levels",
            "baseName": "levels",
            "type": "Array<ModelingHierarchyLevel>"
        },
        {
            "name": "displayFolder",
            "baseName": "displayFolder",
            "type": "string"
        },
        {
            "name": "parentChildOrphanHandlingType",
            "baseName": "parentChildOrphanHandlingType",
            "type": "ParentChildOrphanHandlingType"
        },
        {
            "name": "inheritanceType",
            "baseName": "inheritanceType",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ModelingHierarchy.attributeTypeMap;
    }
}

