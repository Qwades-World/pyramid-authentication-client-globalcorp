/**
 * Pyramid Analytics Web API
 * Pyramid Analytics Web API enables user applications to manage their pyramid                                             data and settings
 *
 * The version of the OpenAPI document: 2023.12.181
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { MetaDataTranslation } from './metaDataTranslation';
import { ModelingAggregationMapping } from './modelingAggregationMapping';
import { ModelingColumn } from './modelingColumn';
import { ModelingFolderTranslations } from './modelingFolderTranslations';
import { ModelingHierarchy } from './modelingHierarchy';
import { ModelingMeasure } from './modelingMeasure';
import { ModelingTableType } from './modelingTableType';

/**
* Table definition in a model, contains table schema, name, columns, etc.
*/
export class ModelingTable {
    /**
    * Unique identifier of the primary key column of this table
    */
    'primaryKeyColumnUniqueName'?: string;
    /**
    * Is this table is an Aggregated table
    */
    'isAggregatedTable'?: boolean;
    /**
    * List of measures in this table
    */
    'modelingMeasures'?: Array<ModelingMeasure>;
    'modelingTableType'?: ModelingTableType;
    /**
    * The table\'s display name
    */
    'displayName'?: string;
    /**
    * List of aggregated values in this aggregated table
    */
    'modelingAggregationMappings'?: Array<ModelingAggregationMapping>;
    /**
    * Defines whether to synchronize columns with DB columns.
    */
    'syncColumnsWithDb'?: boolean;
    /**
    * The tables\'s description
    */
    'description'?: string;
    /**
    * Visible in the relationship diagram
    */
    'isVisible'?: boolean;
    /**
    * Schema name in the source database
    */
    'schemaName'?: string;
    /**
    * List of columns in this table
    */
    'modelingColumns'?: Array<ModelingColumn>;
    /**
    * Tables name in the source database
    */
    'sourceTableName'?: string;
    /**
    * Unique identifier of this table
    */
    'uniqueName'?: string;
    /**
    * list of translations for table display name  by language
    */
    'translations'?: Array<MetaDataTranslation>;
    /**
    * The number of rows in the table
    */
    'tableSize'?: number;
    /**
    * Is this table a telemetry ml table
    */
    'isML'?: boolean;
    /**
    * List of measure group ids
    */
    'measureGroups'?: Set<string>;
    /**
    * The table\'s system ID
    */
    'tableId'?: string;
    /**
    * List of hierarchies in this table
    */
    'modelingHierarchies'?: Array<ModelingHierarchy>;
    /**
    * List of translations for each folder display name in the model.
    */
    'foldersTranslations'?: Array<ModelingFolderTranslations>;
    /**
    * If this tables is based on a query, instead of schema and table name
    */
    'customQuery'?: string;
    /**
    * Value used to determine the type of the item receiving, use the class name
    */
    'inheritanceType'?: string = 'ModelingTable';

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "primaryKeyColumnUniqueName",
            "baseName": "primaryKeyColumnUniqueName",
            "type": "string"
        },
        {
            "name": "isAggregatedTable",
            "baseName": "isAggregatedTable",
            "type": "boolean"
        },
        {
            "name": "modelingMeasures",
            "baseName": "modelingMeasures",
            "type": "Array<ModelingMeasure>"
        },
        {
            "name": "modelingTableType",
            "baseName": "modelingTableType",
            "type": "ModelingTableType"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "modelingAggregationMappings",
            "baseName": "modelingAggregationMappings",
            "type": "Array<ModelingAggregationMapping>"
        },
        {
            "name": "syncColumnsWithDb",
            "baseName": "syncColumnsWithDb",
            "type": "boolean"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "isVisible",
            "baseName": "isVisible",
            "type": "boolean"
        },
        {
            "name": "schemaName",
            "baseName": "schemaName",
            "type": "string"
        },
        {
            "name": "modelingColumns",
            "baseName": "modelingColumns",
            "type": "Array<ModelingColumn>"
        },
        {
            "name": "sourceTableName",
            "baseName": "sourceTableName",
            "type": "string"
        },
        {
            "name": "uniqueName",
            "baseName": "uniqueName",
            "type": "string"
        },
        {
            "name": "translations",
            "baseName": "translations",
            "type": "Array<MetaDataTranslation>"
        },
        {
            "name": "tableSize",
            "baseName": "tableSize",
            "type": "number"
        },
        {
            "name": "isML",
            "baseName": "isML",
            "type": "boolean"
        },
        {
            "name": "measureGroups",
            "baseName": "measureGroups",
            "type": "Set<string>"
        },
        {
            "name": "tableId",
            "baseName": "tableId",
            "type": "string"
        },
        {
            "name": "modelingHierarchies",
            "baseName": "modelingHierarchies",
            "type": "Array<ModelingHierarchy>"
        },
        {
            "name": "foldersTranslations",
            "baseName": "foldersTranslations",
            "type": "Array<ModelingFolderTranslations>"
        },
        {
            "name": "customQuery",
            "baseName": "customQuery",
            "type": "string"
        },
        {
            "name": "inheritanceType",
            "baseName": "inheritanceType",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ModelingTable.attributeTypeMap;
    }
}

